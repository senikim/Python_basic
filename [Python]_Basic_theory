{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOGjQaZ1d49WOhN4cb/COLi"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Python 기초 이론과 실습"
      ],
      "metadata": {
        "id": "09ty-5rdXXu9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "input() : 모든 입력 값 문자열"
      ],
      "metadata": {
        "id": "3ib8WPUwXK6L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "print() : f-string을 활용해서 변수값을 다른 텍스트와 표현"
      ],
      "metadata": {
        "id": "LWHn-YXMXpKc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 몫과 나머지 한번에 구하기\n",
        "divmod(10,3)"
      ],
      "metadata": {
        "id": "BY5t9DyCXr5m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result = divmod(10,3)\n",
        "result[0]\n",
        "result[1]"
      ],
      "metadata": {
        "id": "GEOcU6QJYMGM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#거듭제곱\n",
        "# ** (not ^)"
      ],
      "metadata": {
        "id": "nUDaLwhvYfvE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 0. input 함수와 print 함수"
      ],
      "metadata": {
        "id": "t8fGCafTctrM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# input 함수와 print 함수\n",
        "\n",
        "example = input(\"안녕하세요? 오늘 기분은 어떤가요?\")\n",
        "# example 출력\n",
        "print(example)\n",
        "# f-string을 사용한 출력\n",
        "print(f\"오늘 기분이 {example} 라고 답했습니다.\") ## f {}\n",
        "print(\"오늘 기분이 \" + example + \" 라고 답했습니다.\") ## + +"
      ],
      "metadata": {
        "id": "zeTrV0Cvcwya"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Data Type (자료형)\n",
        "* 문자열\n",
        "* 리스트\n",
        "* 튜플\n",
        "* 딕셔너리"
      ],
      "metadata": {
        "id": "ZxMjvhDssMe-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1) 문자열\n",
        "문자, 단어로 구성된 문자들의 집합"
      ],
      "metadata": {
        "id": "_p3XVyxKcMcf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "string = \"Datascientist\"\n",
        "print(string[0]) ## 'D' 출력/ 인덱싱\n",
        "print(string[0:4]) ## 'Data' 출력/ 슬라이싱\n",
        "\n",
        "# 인덱스 0부터 인식"
      ],
      "metadata": {
        "id": "f6Ysi8sMcTLX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2) 리스트\n",
        "* [  ] 대괄호로 둘러 쌓여 있다.\n",
        "* 인덱싱, 슬라이싱 가능"
      ],
      "metadata": {
        "id": "GDndiYKcgS3f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_list = [1,2,3,\"hi\",4]\n",
        "print(my_list[0]) ## 1 출력 / 인덱싱\n",
        "print(my_list[0:4]) ## 1,2,3,\"hi\" / 슬라이싱"
      ],
      "metadata": {
        "id": "95vQc5OSf791"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3) 튜플\n",
        "* 리스트 처럼 값들의 모음이지만 수정이 불가능\n",
        "* (  ) 소괄호로 둘러 쌓여 있음\n",
        "* 인덱싱, 슬라이싱 가능"
      ],
      "metadata": {
        "id": "hg1GWPCWg5_w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_tuple=(1,2,'a','b')\n",
        "print(my_tuple[3])\n",
        "print(my_tuple[1:])"
      ],
      "metadata": {
        "id": "nIUdFe2kgvK2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4) 딕셔너리\n",
        "\n",
        "*   { } 중괄호 안에 키:값 형식으로 저장\n",
        "*   사전에서 단어 찾는 것처럼 값 가져올 수 있다.\n",
        "* 인덱싱, 슬라이싱 불가능\n",
        "* key를 이용해서 value를 구함\n"
      ],
      "metadata": {
        "id": "9RdYlclrheyB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_dict = {'apple':500, 'dog':1000, 'banana':100, 'cat':30}\n",
        "print(my_dict['apple']) ## 500 출력\n",
        "print(my_dict['dog']) ## 1000 출력\n",
        "\n",
        "# key = ('apple', 'dog', 'banana', 'cat)"
      ],
      "metadata": {
        "id": "sE0-BRl0hQ_G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MISSION 1\n",
        "##### 이름과 태어난 연도를 입력받아 나이와 함께 인사하는 코드 작성하기\n",
        "* 사용자에게 총 2번의 입력을 받아 각각 서로 다른 변수에 저장해주세요\n",
        "\n",
        " 이름(name), 태어난 해(born)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "* 이 변수 2개를 모두 활용해 나이(age)를 계산한 다음, 인사를 하는 프로그램을 작성해주세요\n",
        "\n",
        " 예) 유재석님, 안녕하세요! 올해 51살이 되셨군요? "
      ],
      "metadata": {
        "id": "VryuaUb8ieF8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name = input(\"이름을 입력해주세요.\")\n",
        "born = input(\"태어난 해를 입력해주세요.\")\n",
        "\n",
        "age = 2022 - int(born) + 1 ## R) as.numeric -> P) int()\n",
        "\n",
        "print(f\"{name}, 안녕하세요! 올해 {age}살이 되셨군요?\")\n",
        "\n",
        "\n",
        "## OR\n",
        "## born = int(input(\"태어난 해를 입력해주세요.\"))"
      ],
      "metadata": {
        "id": "slYBoBiSh4ps"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "AlFNlQs81ibX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. 제어문, 함수\n",
        "* If 문\n",
        "* While 문\n",
        "* For 문"
      ],
      "metadata": {
        "id": "MzjKwvw-l9rb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1) IF 문\n",
        "* 조건 작성 후 마무리 :\n",
        "* 코드 들여쓰기 중요\n",
        "* if-elif-else"
      ],
      "metadata": {
        "id": "3LI20arfmNhJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "password=\"datadata1234\"\n",
        "my_input=input(\"PASSWORD : \")\n",
        "if password == my_input :\n",
        "    print(\"LOGIN SUCCESS\")\n",
        "else:  ## 들여쓰기 주의 !\n",
        "        print(\"LOGIN FAIL\")"
      ],
      "metadata": {
        "id": "qSKTmorQj4s-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# if-elif-else\n",
        "\n",
        "age = int(input(\"당신의 나이를 알려주세요.\"))\n",
        "if age < 20:\n",
        "    print(\"20대 미만입니다.\")\n",
        "elif age <= 23:\n",
        "    print(\"20대 초반입니다.\")\n",
        "elif age <= 26 :\n",
        "    print(\"20대 중반입니다.\")\n",
        "elif age <= 29 :\n",
        "    print(\"20대 후반입니다.\")\n",
        "else :\n",
        "    print(\"30대 이상입니다.\")"
      ],
      "metadata": {
        "id": "ytJLfRhxm8E6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2) WHILE 문\n",
        "* 조건문이 참인 동안 while문 아래의 문장이 반복해서 수행된다.\n",
        "* 조건 끝날 때 :"
      ],
      "metadata": {
        "id": "2YwuMSkroa1i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num = 0\n",
        "while num < 5 :\n",
        "    num = num+1 ## num 이라는 변수에 1을 더한 값을 덮어 씌운다.\n",
        "    print(\"Hello!\")\n",
        "    print(f\"num이 현재 {num} : Hello!\") ## num이 몇일 때\n",
        "\n",
        "## num이 5가 되기 전까지 \"Hello!\" 출력"
      ],
      "metadata": {
        "id": "ZIZ2Xg98n_cp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3) FOR 문\n",
        "* 리스트, 튜플, 문자열의 첫 번째 요소부터 마지막 요소까지 차례로 변수에 대입되어 for문 안의 문장이 수행된다.\n",
        "* 끝에 :\n",
        "* for (변수) in (변수)\n",
        "* for i in range() "
      ],
      "metadata": {
        "id": "45xCzDZbpSzv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "numbers = ['one', 'two', 'three']\n",
        "for number in numbers :\n",
        "    print(number)"
      ],
      "metadata": {
        "id": "gMZXxmHYorf-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(7):\n",
        "    print('Hello!') ## 7번 출력\n",
        "    print(f\"i는 현재 {i} : Hello!\")"
      ],
      "metadata": {
        "id": "N_-pjKOQqLNO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MISSION 2\n",
        "* 잡은 몬스터 수를 세는 변수에 초기값으로 0을 저장해주세요.\n",
        "* 반복문을 사용해서 몬스터를 잡을 때마다 1을 더해주세요.\n",
        "* 잡은 몬스터 수가 1마리 ~10마리일 때까지 현재 몬스터 수를 출력하고\n",
        "* 10마리가 되면 LEVEL UP! 을 출력해주세요.\n",
        "* 몬스터를 잡으시겠습니까? Y/N 중 선택\n",
        "* Y를 입력하면 몬스터 수에 1을 더하고\n",
        "* N을 입력하면 몬스터 수에 1을 뺍니다.\n",
        "* 잡은 몬스터 수가 10이 되면 LEVEL UP!"
      ],
      "metadata": {
        "id": "lizR_3w-qxNv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 예시 답안\n",
        "\n",
        "kill_count = 0\n",
        "\n",
        "while kill_count < 10 :  ## 조건을 만족할 때 반복\n",
        "    answer = input(\"몬스터를 잡으시겠습니까? Y/N : \")\n",
        "    if answer in ['Y', 'N'] :\n",
        "        if answer == 'Y' :\n",
        "            kill_count = kill_count +1  ## kill_count += 1\n",
        "        else : \n",
        "            kill_count = kill_count -1\n",
        "        print(f\"현재 몬스터 수 : {kill_count}\")\n",
        "    else :\n",
        "        print(\"다시 입력하세요.\")\n",
        "\n",
        "    if kill_count < 10 :\n",
        "        print(\"몬스터를 더 잡아야 합니다.\")\n",
        "    \n",
        "print(\"LEVEL UP!\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "nd9mpRIhwCUt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "# 나의 답안\n",
        "\n",
        "kill_count = 0\n",
        "input(\"몬스터를 잡으시겠습니까? Y/N : \")\n",
        "while kill_count < 9 :\n",
        "    kill_count = kill_count+1\n",
        "    input(\"몬스터를 잡으시겠습니까? Y/N : \")\n",
        "    \n",
        "if input == 'Y' :\n",
        "    kill_count = kill_count+1\n",
        "    print(f\"현재 몬스터 수 : {kill_count}\")\n",
        "elif input == 'N' :\n",
        "    kill_count = kill_count-1\n",
        "    print(f\"현재 몬스터 수 : {kill_count}\")\n",
        "'''"
      ],
      "metadata": {
        "id": "97gV_5NmqViH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "JpN_oO4w1duM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. 알아두면 쓸모있는 Python 문법\n",
        "* 함수\n",
        "* 클래스와 메서드\n",
        "* 모듈과 패키지\n",
        "* 파이썬 라이브러리\n",
        "* 절대경로와 상대경로"
      ],
      "metadata": {
        "id": "fUJGjR90x471"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1) 함수\n",
        "* 반복적으로 사용되는 가치 있는 부분을 하나로 묶어서\n",
        "* 어떤 입력값을 주었을 때 어떤 결과값을 돌려준다.\n",
        "* INPUT = 입력값 = 파라미터\n",
        "* OUTPUT = 출력값 = 리턴값\n",
        "* 리턴값은 필수 아님\n",
        "* def , return"
      ],
      "metadata": {
        "id": "JsuNUE8nyiou"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 입력값, 리턴값이 있는 함수\n",
        "def add(a,b): ## 함수 정의\n",
        "    return a+b\n",
        "\n",
        "# e.g\n",
        "n1 = 3\n",
        "n2 = 7\n",
        "result = add(n1, n2)\n",
        "print(result)  ## 함수 호출"
      ],
      "metadata": {
        "id": "2GPvT3-Hsp-y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 리턴값만 있는 함수\n",
        "def say() :  ## 함수 정의\n",
        "    return \"Hi!\"\n",
        "\n",
        "a = say()\n",
        "print(a)  ##함수 호출"
      ],
      "metadata": {
        "id": "l9xlwybN0tXw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2) 클래스\n",
        "* 유사한 정보들이나 기능들로부터 반드시 지닐 법한 것들만 추출하여 앞으로 계속해서 찍어낼 수 있게끔, 하나의 템플릿 처럼 만듦\n",
        "* 객체의 함수 = 메소드\n",
        "* '**객체.메소드명**' 으로 메소드 호출"
      ],
      "metadata": {
        "id": "lXsY7aAW1KPX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3) 모듈\n",
        "\n",
        "* 파이썬 변수, 함수, 클래스 등을 관련있는 것들끼리 모아놓은 하나의 파일\n",
        "* 모든 파이썬 파일은 하나의 파이썬 모듈\n",
        "* 파이썬을 설치할 때 이미 내장된 다양한 모듈이 있다.\n",
        "\n",
        "\n",
        "\n",
        "* import 모듈명\n",
        "* from 모듈명 import 불러오고자 하는 함수, 클래스 등"
      ],
      "metadata": {
        "id": "VWlEnR3v1_Q_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4) 패키지\n",
        "\n",
        "* **import 패키지명.모듈명**\n",
        "* **from 패키지명 import 모듈명**\n",
        "* **from 패키지명.모듈명 import 사용할 요소** 이름"
      ],
      "metadata": {
        "id": "uYC1P9KN2ZiO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 5) 절대 경로와 상대경로\n",
        "\n",
        "* 절대경로 : 어떤 파일이 가지고 있는 고유한 경로, '주소'의 개념\n",
        "* 상대경로 : 현재 위치한 곳을 기준으로 한 파일의 위치"
      ],
      "metadata": {
        "id": "MIyFx6ds3HEl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MISSION 3\n",
        "\n",
        "* 메뉴는 아메리카노(4100원), 카페라떼(4600원), 바닐라라떼(5100원) 세 가지\n",
        "* 조건하실 메뉴 이름(order)을 입력\n",
        "* 조건문을 이용해서 메뉴에 맞는 금액 (price)이 계산되도록 식을 만들어 주세요.\n",
        "* 총 금액(total_price)을 구하는 식을 만들어 주세요.\n",
        "* 투입한 금액(money)이 총 금액보다 크면 거스름돈(charge)을 계산하고, 부족하면 주문을 취소합니다.\n",
        "* 숫자 4를 입력하면 주문을 종료하며 반복문을 빠져 나옵니다.\n",
        "* 메뉴판에 없는 메뉴를 입력하면 잘못된 주문이라는 문구를 띄워주고 다시 메뉴판을 보여줍니다. "
      ],
      "metadata": {
        "id": "GtrCa4NM3nc0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "# 나의 답안\n",
        "\n",
        "#메뉴판\n",
        "menu = {'아메리카노' : 4100, '카페라떼' : 4600, '바닐라라떼':5100}\n",
        "print(\"=\" * 60)\n",
        "print(menu)\n",
        "print('=' * 60)\n",
        "\n",
        "#자판기\n",
        "order = input(\"커피 종류를 선택하세요. 4를 입력하면 주문이 종료됩니다. >>> \")\n",
        "number = int(input(\"몇 잔을 드릴까요? >>> \"))\n",
        "\n",
        "if order == '아메리카노' :\n",
        "    price = 4100\n",
        "elif order == '카페라떼' :\n",
        "    price = 4600\n",
        "elif order == '바닐라라떼' :\n",
        "    price = 5100\n",
        "else :\n",
        "    print(\"잘못된 주문입니다.\")\n",
        "    print(menu)\n",
        "total_price = price*number\n",
        "money = int(input(f\"총 금액은 {total_price} 입니다. 돈을 투입해주세요 >>> \"))\n",
        "\n",
        "if money > total_price :\n",
        "    change = money - total_price\n",
        "    print(f\"{money}원을 받았습니다. 거스름돈은 {change}원 입니다.\")\n",
        "elif money < total_price :\n",
        "    \n",
        "'''"
      ],
      "metadata": {
        "id": "wf5tSqUo4KPv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 예시 답안\n",
        "\n",
        "while True : ## 무한 반복\n",
        "    print(\"=\"*60)\n",
        "    menu = {'아메리카노' : 4100, '카페라떼' : 4600, '바닐라라떼':5100}\n",
        "    print(menu)\n",
        "    print(\"=\"*60)\n",
        "    \n",
        "    #커피 종류 입력\n",
        "    order = input(\"커피 종류를 선택하세요. 4를 입력하면 주문이 종료됩니다. >>> \")\n",
        "    \n",
        "    if order in menu :\n",
        "    # 입력한 커피 가격을 price 변수에 넣어줍니다.\n",
        "        price = menu[order]\n",
        "\n",
        "        cups = int(input(\"몇 잔을 드릴까요? >>> \"))\n",
        "        # 총 금액을 계산하고 total_price 변수에 넣어줍니다.\n",
        "        total_price = price*cups\n",
        "\n",
        "        money = int(input(f\"총 금액은 {total_price} 입니다. 돈을 투입해주세요 >>> \"))\n",
        "        # 총 금액보다 투입 금액이 큰 경우 거스름돈을 계산하고 출력합니다.\n",
        "        if money >= total_price :\n",
        "            change = money - total_price\n",
        "            print(f\"{money}원을 받았습니다. 거스름돈은 {change}원 입니다.\")\n",
        "    \n",
        "        # 총 금액보다 투입 금액이 작은 경우 주문 취소\n",
        "        else :\n",
        "            print(\"금액이 부족합니다. 주문이 취소되었습니다.\")\n",
        "\n",
        "    elif order == '4' :\n",
        "        # 4를 입력하면 주문을 종료하고 반복문을 빠져나갑니다.\n",
        "        print(\"주문을 종료합니다.\")\n",
        "        # 반복문 빠져나가기\n",
        "        break\n",
        "\n",
        "    # 다른 숫자 입력한 경우 \"잘못된 주문입니다.\" 출력\n",
        "    else :\n",
        "        print(\"잘못된 주문입니다.\")"
      ],
      "metadata": {
        "id": "kYiNmCpK4hQN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "qWulHJi74nIF"
      }
    }
  ]
}
